KiG(k,n)
Creates a graph of possible moves that the king can make on a k by n chess board.

KtG(k,n)
Creates a graph of possible moves that the knight can make on a k by n chess board.

ContP(G,P)
  G - graph
  P - vertex
  Returns the possible moves that the chess piece can make after landing on P.
  Example: ContP(KiG(3, 3)[1], [4]); ->  {[4, 1], [4, 2], [4, 5], [4, 7], [4, 8]}

GP(G,k)
  G - graph
  k - length of path
  Returns the set of possible paths from vertex 1 of length k
  Example: GP(KiG(3, 3)[1], 3); ->  {[1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6], [1, 4, 2], [1, 4, 5], [1, 4, 7], [1, 4, 8], [1, 5, 2], [1, 5, 3],  [1, 5, 4], [1, 5, 6], [1, 5, 7], [1, 5, 8], [1, 5, 9]}

CGP(G)
  G - graph
  Returns the set of hamiltonian cycles in from the graph
  Hamiltonian cycles - cyclical  path that hits every vertex
  Example: CGP(KiG(2, 2)[1]); -> {[1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2], [1, 4, 2, 3], [1, 4, 3, 2]}

SAW1(G,a,b,k,S)
  G - graph
  a - vertex
  b - vertex
  k - length of path
  S - set of vertices to avoid
  Returns possible paths that can be made from a to b of length k while avoiding the vertices in S.
  Example: SAW1(KiG(3, 3)[1], 1, 9, 3, {2, 3}); -> {[1, 4, 5, 9], [1, 4, 8, 9], [1, 5, 6, 9], [1, 5, 8, 9]}

SAW(G)
  G - graph
  Returns set of hamiltonian cycles starting at vertex 1
  Example: SAW(KiG(2, 2)[1]); ->  {[1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2],  [1, 4, 2, 3], [1, 4, 3, 2]}

SAW1nu(G,a,b,k,S)
  G - graph
  a - vertex
  b - vertex
  k - length of path
  S - set of vertices to avoid
  Returns the number of possible paths that can be made from a to b of length k while avoiding the vertices in S

SAWnu(G)
  G - graph
  Returns the number of hamiltonian cycles starting at vertex 1
  KtTours(k,n)
  Returns possible hamiltonian cycles the knight can make starting at vertex 1

KiTours(k,n)
  Returns possible hamiltonian cycles the king can make starting at vertex 1

PtoW(P,m,n)
  P : graph 
  m, n: points on graph
  Steps to move on graph P from points m to n

KiRtL(m,n)
  m, n : values for chessboard
  Print the possible routes taken by the king. Can be plotted to show the route. 

CF(G)
  G := Graph in the form [set of vertices, set of edges]
  Returns the canonical form of the graph

WtEwalks(G,a,b,t)
  G- graph
  a , b - points on the graph
  t - variable
  Returns the weighted enumerator of walk length from point a to b from graph G in terms of t
  Example: WtEwalks([{2, 3}, {1, 3}, {1, 2}], 1, 2, t);
                                t      
                         - ------------
                              2        
                           2 t  + t - 1

KiRtG(k,Max)


KingToursGF(k,Max,t)
  k - to determine the k value in the k x n chessboard
  Max - limit for the length of chessboards
  t - variable
  Generating functions which when expanded to its taylor series, the coefficient of t^n gives the number of possible king’s moves in a k x n chessboard.
  Example: coeff(taylor(KingToursGF(2, 7, t), t = 0, 10), t, 5);
                               16
  nops(KiTours(2, 5))/2;
                               16


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Ideas

Make up fictional chess pieces and find the hamiltonian cycles using that
  King that can move two steps and 1
  Knight moves 3 straight
  Knight moves in multiples of n ( n= 2,3,4…)

Possibly make up a graphical chess-board with universal moves of each piece. 

Rook’s move (vertical or horizontal)

Fictional queen’s move. Actual queen can move vertically, horizontally and diagonally.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Basic Goals

KtG KiG procedure - get the sequences from that and put in the OEIS

Dr Z figured out the generating function for KiG - verify that

Create better visualization for the tours - some frontend stuff

Get a generating function for a 4 x n board - final goal

Fictional pieces

